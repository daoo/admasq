#!/usr/bin/env python3

import argparse
import requests
import sys


def filter_lines(lines):
    for line in lines:
        stripped = line.strip()
        if stripped and not stripped.startswith('#'):
            yield stripped


def read_filtered(path):
    with open(path, 'r') as file:
        return filter_lines(file.readlines())


def download_domains(url):
    with requests.get(url) as response:
        for line in filter_lines(response.text.splitlines()):
            yield line.split()[-1]


def make_dnsmasq(ip, domains):
    for domain in domains:
        yield 'address="/{}/{}"\n'.format(domain, ip)


def combine_sources(source_urls, whitelist):
    result = set()
    for url in source_urls:
        sys.stdout.write('Downloading "{}": '.format(url))
        domains = set(download_domains(url))
        filtered = domains - whitelist
        sys.stdout.write('used {}/{}\n'.format(len(filtered), len(domains)))
        result = result | domains
    sys.stdout.write('Total count: {}\n'.format(len(result)))
    return result


parser = argparse.ArgumentParser(
    prog='admasq',
    description='Build dnsmasq ad-blocking config.')
parser.add_argument('--ip',
                    default='127.0.0.1',
                    help='ip address which requests are redirect to')
parser.add_argument('--output',
                    '-o',
                    help='output config file',
                    required=True)
parser.add_argument('--input',
                    '-i',
                    help='input source list',
                    required=True)
parser.add_argument('--whitelist',
                    help='whitelist file')

opts = parser.parse_args(sys.argv[1:])

source_urls = read_filtered(opts.input)
whitelist = set(read_filtered(opts.whitelist)) if opts.whitelist else set()
result = combine_sources(source_urls, whitelist)
with open(opts.output, 'w') as file:
    file.writelines(make_dnsmasq(opts.ip, sorted(result)))
